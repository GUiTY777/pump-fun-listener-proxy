import asyncio
import websockets
import json
import os
import aiohttp

WS_URL = "wss://pumpportal.fun/api/data"
PROXY_URL = "https://pump-fun-proxy-production-594d.up.railway.app/add-token"
TOKENS_FILE = "tokens_raw.json"
SEEN = set()

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
def load_existing_tokens():
    if os.path.exists(TOKENS_FILE):
        try:
            with open(TOKENS_FILE, "r") as f:
                data = json.load(f)
                for addr in data:
                    SEEN.add(addr)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {len(SEEN)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è tokens_raw.json: {e}")
    else:
        print("üü¶ –§–∞–π–ª tokens_raw.json –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å—Ç–∞—Ä—Ç—É–µ–º —Å –Ω—É–ª—è")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∏ —à–ª—ë–º –≤ –ø—Ä–æ–∫—Å–∏
def save_token(address):
    SEEN.add(address)
    with open(TOKENS_FILE, "w") as f:
        json.dump(list(SEEN), f, indent=2)
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(SEEN)} —Ç–æ–∫–µ–Ω–æ–≤ –ª–æ–∫–∞–ª—å–Ω–æ")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ proxy
    asyncio.create_task(send_to_proxy(address))

async def send_to_proxy(address):
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(PROXY_URL, json={"token": address}) as resp:
                if resp.status == 200:
                    print(f"üì§ –¢–æ–∫–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –ø—Ä–æ–∫—Å–∏: {address}")
                else:
                    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –ø—Ä–æ–∫—Å–∏: {resp.status}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø—Ä–æ–∫—Å–∏: {e}")

async def listen():
    print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket pumpportal.fun...")
    async with websockets.connect(WS_URL) as ws:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã...")

        await ws.send(json.dumps({"method": "subscribeNewToken"}))

        while True:
            try:
                msg = await ws.recv()
                print(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg}")

                data = json.loads(msg)
                if isinstance(data, dict) and data.get("txType") == "create" and "mint" in data:
                    address = data["mint"]
                    if address not in SEEN:
                        print(f"üÜï –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {address}")
                        save_token(address)
                else:
                    print("‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—è tokenAddress –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await asyncio.sleep(3)

if __name__ == "__main__":
    load_existing_tokens()
    asyncio.run(listen())
